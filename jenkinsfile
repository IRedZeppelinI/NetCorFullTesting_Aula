pipeline
{
    agent any
    stages
    {
        stage("Limpar")
        {
            steps
            {
                /* passo 1 - limpar o workspace */
                cleanWs()
                /* passo 2 - escrever no log */
                echo "o workspace foi limpo"
            }
        }
        stage("Git Checkout")
        {
            steps
            {
                /* passo 3 - aceder ao git */
                git branch: 'main', changelog: false, poll: false, url: 'https://dev.azure.com/Computencial/Academia2020Pipelines/_git/NetCorFullTesting'
                /* passo 4 - escrever no log */
                echo "a solução foi descarregada"
                
            }
        }
        stage("Restore Lib")
        {
            steps
            {
                /* passo 5 - LIB dependency restore */
                dotnetRestore project: 'Lib/Lib.csproj', sdk: '.NET 6'
                /* passo 6 - escrever no log */
                echo "dotnet restore"
            }
        }
        stage("Build Lib")
        {
            steps
            {
                /* passo 7 - build LIB */
                dotnetBuild configuration: 'Release', project: 'Lib/Lib.csproj', sdk: '.NET 6', showSdkInfo: true, unstableIfWarnings: true
                /* passo 6 - escrever no log */
                echo "dotnet build"
            }
        }
        stage("Unit Testing Lib")
        {
            steps
            {
                /* passo 9 - unit testing LIB */
                dotnetTest logger: 'trx;LogFileName=testresults.trx', project: 'UnitTesting/UnitTesting.csproj', resultsDirectory: 'TestResults', sdk: '.NET 6', unstableIfWarnings: true
                /* passo 10 - oublicar resultados dos testes */
                xunit([MSTest(excludesPattern: '', pattern: 'TestResults/testresults.trx', stopProcessingIfError: true)])
                 /* passo 11 - escrever no log */
                echo "unit tests"
            }
        }
        stage("Restore Web")
        {
            steps
            {
                /* passo 10 - Web dependency restore */
                dotnetRestore project: 'WebAppPipeline/WebAppPipeline.csproj', sdk: '.NET 6'
                /* passo 11 - escrever no log */
                echo "dotnet restore"
            }
        }
        stage("Build Web")
        {
            steps
            {
                /* passo 12 - build Web */
                dotnetBuild configuration: 'Release', project: 'WebAppPipeline/WebAppPipeline.csproj', sdk: '.NET 6', showSdkInfo: true, unstableIfWarnings: true
                /* passo 13 - escrever no log */
                echo "dotnet build"
            }
        }
        stage("Functional Testing Web")
        {
            steps
            {
                /* passo 14 - functional testing WEB */
                dotnetTest logger: 'trx;LogFileName=functionaltestresults.trx', project: 'FunctionalTesting/FunctionalTesting.csproj', resultsDirectory: 'TestResults', sdk: '.NET 6', unstableIfWarnings: true
                /* passo 15 - oublicar resultados dos testes */
                xunit([MSTest(excludesPattern: '', pattern: 'TestResults/functionaltestresults.trx', stopProcessingIfError: true)])
                 /* passo 16 - escrever no log */
                echo "functional tests"
            }
        }
        stage("Integration Testing Web")
        {
            steps
            {
                /* passo 17 - integration testing WEB */
                dotnetTest logger: 'trx;LogFileName=integrationtestresults.trx', project: 'IntegrationTesting/IntegrationTesting.csproj', resultsDirectory: 'TestResults', sdk: '.NET 6', unstableIfWarnings: true
                /* passo 18 - publicar resultados dos testes */
                xunit([MSTest(excludesPattern: '', pattern: 'TestResults/integrationtestresults.trx', stopProcessingIfError: true)])
                 /* passo 19 - escrever no log */
                echo "integration tests"
            }
        }
        stage("Publicar Web App")
        {
            steps
            {
                
                dotnetPublish configuration: 'Release', outputDirectory: 'Release', project: 'WebAppPipeline/WebAppPipeline.csproj', selfContained: false
                
            }
        }
        
        stage("Criar Artefacto")
        {
            steps
            {
                zip archive: true, dir: 'Release', exclude: '', glob: '', overwrite: true, zipFile: 'WebApp.zip'
            }
        }
        stage("Deploy para Azure")
        {
            steps
            {
                script
                {
                    withCredentials([azureServicePrincipal(
                        credentialsId:'PIPELINEJENKINS',
                        subscriptionIdVariable:'SUBS_ID',
                        clientIdVariable:'CLIENT_ID',
                        clientSecretVariable:'CLIENT_SECRET',
                        tenantIdVariable:'TENANT_ID'
                        )
                    ])
                    {
                        bat label:'',script:'az login --service-principal -u ' + CLIENT_ID + ' -p ' + CLIENT_SECRET + ' -t ' + TENANT_ID
                        bat label:'',script:'az webapp deployment source config-zip --resource-group 71910 --name jenkinspipleine --src WebApp.zip' 
                    }
                }
            }
        }
    }
}