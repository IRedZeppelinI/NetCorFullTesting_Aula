# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  #vmImage: ubuntu-latest
  name: Rumos

variables:
  solution: '**/WebAppPipeline.sln'
  lib: '**/Lib/Lib.csproj'
  web: '**/WebAppPipeline/WebAppPipeline.csproj'
  unittests: '**/UnitTesting/UnitTesting.csproj'
  functionaltests: '**/FunctionalTesting/FunctionalTesting.csproj'
  integrationtests: '**/IntegrationTesting/IntegrationTesting.csproj'
  buildconfiguration: 'Release'
  builplatform: 'Any CPU'
  artifactName: 'WebAppRelease'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

# CI - Continuous Integration

- task: DotNetCoreCLI@2
  displayName: 'Restore Lib Dependencies'
  inputs:
    command: 'restore'
    projects: '$(lib)'

- task: DotNetCoreCLI@2
  displayName: 'Build Lib'
  inputs:
    command: 'build'
    projects: '$(lib)'

- task: DotNetCoreCLI@2
  displayName: 'Unit testing Lib'
  inputs:
    command: 'test'
    projects: '$(unittests)'

- task: DotNetCoreCLI@2
  displayName: 'Restore Web Dependencies'
  inputs:
    command: 'restore'
    projects: '$(web)'

- task: DotNetCoreCLI@2
  displayName: 'Build Web'
  inputs:
    command: 'build'
    projects: '$(web)'

- task: DotNetCoreCLI@2
  displayName: 'Functional testing Web'
  inputs:
    command: 'test'
    projects: '$(functionaltests)'

- task: DotNetCoreCLI@2
  displayName: 'Intgration testing Web'
  inputs:
    command: 'test'
    projects: '$(integrationtests)'


# CI - Continuous Delivery

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildconfiguration) --output $(Build.ArtifactsStagingDirectory)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(artifactName)'
    publishLocation: 'Container'